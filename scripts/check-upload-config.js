#!/usr/bin/env node

/**
 * Script de v√©rification de la configuration des uploads
 * Ex√©cutez avec: node scripts/check-upload-config.js
 */

const fs = require('fs');
const path = require('path');

console.log('üîç V√©rification de la configuration des uploads...\n');

// Charger les variables d'environnement
require('dotenv').config();

const UPLOADS_DIR = process.env.UPLOADS_DIR || '/var/www/service-civique-uploads';
const UPLOADS_BASE_URL = process.env.UPLOADS_BASE_URL || '/uploads';

console.log('üìã Configuration d√©tect√©e:');
console.log(`   UPLOADS_DIR: ${UPLOADS_DIR}`);
console.log(`   UPLOADS_BASE_URL: ${UPLOADS_BASE_URL}`);
console.log('');

// V√©rifier si le dossier existe
console.log('üìÅ V√©rification du dossier uploads...');
if (fs.existsSync(UPLOADS_DIR)) {
    console.log('   ‚úÖ Le dossier existe');

    // V√©rifier les permissions
    try {
        fs.accessSync(UPLOADS_DIR, fs.constants.W_OK);
        console.log('   ‚úÖ Permissions d\'√©criture OK');
    } catch (err) {
        console.log('   ‚ùå ERREUR: Pas de permissions d\'√©criture');
        console.log('   üí° Solution: sudo chown -R $(whoami):$(whoami) ' + UPLOADS_DIR);
    }

    // V√©rifier les sous-dossiers
    const subfolders = ['excel', 'pdf', 'images'];
    subfolders.forEach(folder => {
        const folderPath = path.join(UPLOADS_DIR, folder);
        if (fs.existsSync(folderPath)) {
            console.log(`   ‚úÖ Sous-dossier ${folder}/ existe`);
        } else {
            console.log(`   ‚ö†Ô∏è  Sous-dossier ${folder}/ manquant`);
            console.log(`   üí° Solution: mkdir -p ${folderPath}`);
        }
    });

    // Afficher les stats du dossier
    const stats = fs.statSync(UPLOADS_DIR);
    console.log('\n   üìä Informations d√©taill√©es:');
    console.log(`      Propri√©taire UID: ${stats.uid}`);
    console.log(`      Groupe GID: ${stats.gid}`);
    console.log(`      Permissions: ${(stats.mode & parseInt('777', 8)).toString(8)}`);

} else {
    console.log('   ‚ùå ERREUR: Le dossier n\'existe pas');
    console.log('   üí° Solution: mkdir -p ' + UPLOADS_DIR);
}

console.log('\nüåê V√©rification de l\'utilisateur Node.js...');
console.log(`   Process UID: ${process.getuid()}`);
console.log(`   Process GID: ${process.getgid()}`);

// V√©rifier la configuration Next.js
console.log('\n‚öôÔ∏è  V√©rification de la configuration Next.js...');
const nextConfigPath = path.join(process.cwd(), 'next.config.ts');
if (fs.existsSync(nextConfigPath)) {
    const nextConfig = fs.readFileSync(nextConfigPath, 'utf-8');
    if (nextConfig.includes('bodySizeLimit')) {
        console.log('   ‚úÖ bodySizeLimit configur√©');
    } else {
        console.log('   ‚ö†Ô∏è  bodySizeLimit non trouv√©');
    }
} else {
    console.log('   ‚ö†Ô∏è  next.config.ts non trouv√©');
}

// Tester l'√©criture d'un fichier
console.log('\nüß™ Test d\'√©criture...');
const testFile = path.join(UPLOADS_DIR, 'test-write.txt');
try {
    fs.writeFileSync(testFile, 'test');
    console.log('   ‚úÖ √âcriture de fichier OK');
    fs.unlinkSync(testFile);
    console.log('   ‚úÖ Suppression de fichier OK');
} catch (err) {
    console.log('   ‚ùå ERREUR lors du test d\'√©criture:', err.message);
}

console.log('\n‚ú® V√©rification termin√©e!\n');

