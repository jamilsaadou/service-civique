#!/usr/bin/env node

/**
 * Script de nettoyage des fichiers uploads obsol√®tes
 * Supprime les fichiers plus anciens que X jours qui ne sont plus r√©f√©renc√©s en base de donn√©es
 * 
 * Usage: node scripts/cleanup-old-uploads.js [--days=30] [--dry-run]
 */

const fs = require('fs');
const path = require('path');
const { PrismaClient } = require('../src/generated/prisma');

// Charger les variables d'environnement
require('dotenv').config();

const UPLOADS_DIR = process.env.UPLOADS_DIR || '/var/www/service-civique-uploads';

// Parser les arguments
const args = process.argv.slice(2);
const daysArg = args.find(arg => arg.startsWith('--days='));
const dryRun = args.includes('--dry-run');
const DAYS_OLD = daysArg ? parseInt(daysArg.split('=')[1]) : 30;

console.log('üßπ Script de nettoyage des uploads\n');
console.log(`üìÅ Dossier: ${UPLOADS_DIR}`);
console.log(`üìÖ Fichiers plus vieux que: ${DAYS_OLD} jours`);
console.log(`üîç Mode: ${dryRun ? 'DRY RUN (simulation)' : 'R√âEL'}\n`);

const prisma = new PrismaClient();

async function getReferencedFiles() {
    console.log('üìä R√©cup√©ration des fichiers r√©f√©renc√©s en base de donn√©es...');

    const decrets = await prisma.decret.findMany({
        select: {
            fichierPdf: true,
            fichierExcel: true
        }
    });

    const referencedFiles = new Set();

    decrets.forEach(decret => {
        if (decret.fichierPdf) referencedFiles.add(decret.fichierPdf);
        if (decret.fichierExcel) referencedFiles.add(decret.fichierExcel);
    });

    console.log(`   ‚úÖ ${referencedFiles.size} fichiers r√©f√©renc√©s trouv√©s\n`);
    return referencedFiles;
}

function getFilesInDirectory(dir) {
    const files = [];

    function scanDir(currentDir, relativePath = '') {
        if (!fs.existsSync(currentDir)) return;

        const entries = fs.readdirSync(currentDir, { withFileTypes: true });

        entries.forEach(entry => {
            const fullPath = path.join(currentDir, entry.name);
            const relPath = path.join(relativePath, entry.name);

            if (entry.isDirectory()) {
                scanDir(fullPath, relPath);
            } else if (entry.isFile()) {
                const stats = fs.statSync(fullPath);
                files.push({
                    fullPath,
                    relativePath: relPath.replace(/\\/g, '/'), // Normaliser les slashes
                    size: stats.size,
                    mtime: stats.mtime
                });
            }
        });
    }

    scanDir(dir);
    return files;
}

async function cleanup() {
    try {
        // V√©rifier que le dossier existe
        if (!fs.existsSync(UPLOADS_DIR)) {
            console.error('‚ùå Erreur: Le dossier uploads n\'existe pas:', UPLOADS_DIR);
            process.exit(1);
        }

        // R√©cup√©rer les fichiers r√©f√©renc√©s
        const referencedFiles = await getReferencedFiles();

        // Scanner tous les fichiers
        console.log('üîç Scan des fichiers...');
        const allFiles = getFilesInDirectory(UPLOADS_DIR);
        console.log(`   ‚úÖ ${allFiles.length} fichiers trouv√©s\n`);

        // Calculer la date limite
        const cutoffDate = new Date();
        cutoffDate.setDate(cutoffDate.getDate() - DAYS_OLD);

        // Analyser les fichiers
        let totalSize = 0;
        let oldFilesCount = 0;
        let unreferencedCount = 0;
        const filesToDelete = [];

        console.log('üìã Analyse des fichiers...\n');

        allFiles.forEach(file => {
            const isOld = file.mtime < cutoffDate;
            const isReferenced = referencedFiles.has(file.relativePath);

            if (isOld && !isReferenced) {
                filesToDelete.push(file);
                totalSize += file.size;
            }

            if (isOld) oldFilesCount++;
            if (!isReferenced) unreferencedCount++;
        });

        // Afficher les statistiques
        console.log('üìä Statistiques:');
        console.log(`   ‚Ä¢ Total fichiers: ${allFiles.length}`);
        console.log(`   ‚Ä¢ Fichiers anciens (>${DAYS_OLD} jours): ${oldFilesCount}`);
        console.log(`   ‚Ä¢ Fichiers non r√©f√©renc√©s: ${unreferencedCount}`);
        console.log(`   ‚Ä¢ Fichiers √† supprimer: ${filesToDelete.length}`);
        console.log(`   ‚Ä¢ Espace √† lib√©rer: ${(totalSize / 1024 / 1024).toFixed(2)} MB\n`);

        if (filesToDelete.length === 0) {
            console.log('‚úÖ Aucun fichier √† supprimer\n');
            return;
        }

        // Afficher les fichiers √† supprimer
        if (dryRun) {
            console.log('üìù Fichiers qui seraient supprim√©s:\n');
            filesToDelete.forEach(file => {
                const age = Math.floor((Date.now() - file.mtime.getTime()) / (1000 * 60 * 60 * 24));
                console.log(`   ‚Ä¢ ${file.relativePath} (${(file.size / 1024).toFixed(2)} KB, ${age} jours)`);
            });
            console.log('\nüí° Ex√©cutez sans --dry-run pour supprimer r√©ellement\n');
        } else {
            console.log('üóëÔ∏è  Suppression des fichiers...\n');
            let deleted = 0;
            let failed = 0;

            for (const file of filesToDelete) {
                try {
                    fs.unlinkSync(file.fullPath);
                    deleted++;
                    console.log(`   ‚úÖ Supprim√©: ${file.relativePath}`);
                } catch (error) {
                    failed++;
                    console.error(`   ‚ùå √âchec: ${file.relativePath} - ${error.message}`);
                }
            }

            console.log(`\n‚úÖ Nettoyage termin√©!`);
            console.log(`   ‚Ä¢ Supprim√©s: ${deleted}`);
            console.log(`   ‚Ä¢ √âchecs: ${failed}`);
            console.log(`   ‚Ä¢ Espace lib√©r√©: ${(totalSize / 1024 / 1024).toFixed(2)} MB\n`);
        }

    } catch (error) {
        console.error('‚ùå Erreur:', error);
        process.exit(1);
    } finally {
        await prisma.$disconnect();
    }
}

// Afficher l'aide
if (args.includes('--help') || args.includes('-h')) {
    console.log(`
Usage: node scripts/cleanup-old-uploads.js [options]

Options:
  --days=N      Supprimer les fichiers plus vieux que N jours (d√©faut: 30)
  --dry-run     Mode simulation (ne supprime pas r√©ellement)
  --help, -h    Afficher cette aide

Exemples:
  node scripts/cleanup-old-uploads.js --dry-run
  node scripts/cleanup-old-uploads.js --days=60
  node scripts/cleanup-old-uploads.js --days=90 --dry-run
  `);
    process.exit(0);
}

// Ex√©cuter le nettoyage
cleanup();

